Only in gzip-1.3.12-dac: .deps
Only in gzip-1.3.12-dac: Makefile
Only in gzip-1.3.12-dac: config.log
Only in gzip-1.3.12-dac: config.status
Only in gzip-1.3.12-dac/doc: Makefile
diff -rc gzip-1.3.12/gzip.1 gzip-1.3.12-dac/gzip.1
*** gzip-1.3.12/gzip.1	2006-12-08 13:45:37.000000000 -0500
--- gzip-1.3.12-dac/gzip.1	2008-04-07 17:43:16.000000000 -0400
***************
*** 4,10 ****
  .SH SYNOPSIS
  .ll +8
  .B gzip
! .RB [ " \-acdfhlLnNrtvV19 " ]
  .RB [ \-S\ suffix ]
  [
  .I "name \&..."
--- 4,10 ----
  .SH SYNOPSIS
  .ll +8
  .B gzip
! .RB [ " \-acdfhlLnNrtvV19x " ]
  .RB [ \-S\ suffix ]
  [
  .I "name \&..."
***************
*** 189,194 ****
--- 189,198 ----
  
  .SH OPTIONS
  .TP
+ .B \-x --no-header
+ Do not create or expect a gzip header ... write or read a purely compressed
+ bitstream only. Unless overridden, a suffix of ".dfl" will be added/expected.
+ .TP
  .B \-a --ascii
  Ascii text mode: convert end-of-lines using local conventions. This option
  is supported only on some non-Unix systems. For MSDOS, CR LF is converted
diff -rc gzip-1.3.12/gzip.c gzip-1.3.12-dac/gzip.c
*** gzip-1.3.12/gzip.c	2007-03-20 01:09:51.000000000 -0400
--- gzip-1.3.12-dac/gzip.c	2008-04-07 20:40:20.000000000 -0400
***************
*** 180,185 ****
--- 180,186 ----
  
  		/* local variables */
  
+ int noheader = 0;     /* DAC 2000/12/17: inflate/deflate only - don't write/check for gzip header */
  int ascii = 0;        /* convert end-of-lines to local OS conventions */
  int to_stdout = 0;    /* output to stdout (-c) */
  int decompress = 0;   /* decompress (-d) */
***************
*** 235,240 ****
--- 236,242 ----
  struct option longopts[] =
  {
   /* { name  has_arg  *flag  val } */
+     {"no-header",  0, 0, 'x'}, /* DAC 2000/12/17: inflate/deflate only - don't write/check for gzip header */
      {"ascii",      0, 0, 'a'}, /* ascii text mode */
      {"to-stdout",  0, 0, 'c'}, /* write output on standard output */
      {"stdout",     0, 0, 'c'}, /* write output on standard output */
***************
*** 286,292 ****
  local RETSIGTYPE abort_gzip_signal OF((int));
  local void do_exit      OF((int exitcode)) ATTRIBUTE_NORETURN;
        int main          OF((int argc, char **argv));
! int (*work) OF((int infile, int outfile)) = zip; /* function to call */
  
  #if ! NO_DIR
  local void treat_dir    OF((int fd, char *dir));
--- 288,294 ----
  local RETSIGTYPE abort_gzip_signal OF((int));
  local void do_exit      OF((int exitcode)) ATTRIBUTE_NORETURN;
        int main          OF((int argc, char **argv));
! int (*work) OF((int infile, int outfile, int noheader)) = zip; /* function to call */
  
  #if ! NO_DIR
  local void treat_dir    OF((int fd, char *dir));
***************
*** 335,340 ****
--- 337,343 ----
   "  -t, --test        test compressed file integrity",
   "  -v, --verbose     verbose mode",
   "  -V, --version     display version number",
+  "  -x, --no-header   inflate/deflate only - don't write/check for gzip header",	/* DAC 2008/04/07 */
   "  -1, --fast        compress faster",
   "  -9, --best        compress better",
  #ifdef LZW
***************
*** 423,433 ****
      z_suffix = Z_SUFFIX;
      z_len = strlen(z_suffix);
  
!     while ((optc = getopt_long (argc, argv, "ab:cdfhH?lLmMnNqrS:tvVZ123456789",
  				longopts, (int *)0)) != -1) {
  	switch (optc) {
!         case 'a':
!             ascii = 1; break;
  	case 'b':
  	    maxbits = atoi(optarg);
  	    for (; *optarg; optarg++)
--- 426,440 ----
      z_suffix = Z_SUFFIX;
      z_len = strlen(z_suffix);
  
!     while ((optc = getopt_long (argc, argv, "xab:cdfhH?lLmMnNqrS:tvVZ123456789",
  				longopts, (int *)0)) != -1) {
  	switch (optc) {
! 	case 'a':
! 		ascii = 1; break;
! 	case 'x':	/* DAC 2008/04/07: inflate/deflate only - don't write/check for gzip header */
! 		z_suffix = ".dfl";
! 		z_len = strlen(z_suffix);
! 		noheader = 1; break;
  	case 'b':
  	    maxbits = atoi(optarg);
  	    for (; *optarg; optarg++)
***************
*** 641,647 ****
      /* Actually do the compression/decompression. Loop over zipped members.
       */
      for (;;) {
! 	if ((*work)(fileno(stdin), fileno(stdout)) != OK) return;
  
  	if (input_eof ())
  	  break;
--- 648,654 ----
      /* Actually do the compression/decompression. Loop over zipped members.
       */
      for (;;) {
! 	if ((*work)(fileno(stdin), fileno(stdout), noheader) != OK) return;
  
  	if (input_eof ())
  	  break;
***************
*** 806,812 ****
      /* Actually do the compression/decompression. Loop over zipped members.
       */
      for (;;) {
! 	if ((*work)(ifd, ofd) != OK) {
  	    method = -1; /* force cleanup */
  	    break;
  	}
--- 813,819 ----
      /* Actually do the compression/decompression. Loop over zipped members.
       */
      for (;;) {
! 	if ((*work)(ifd, ofd, noheader) != OK) {
  	    method = -1; /* force cleanup */
  	    break;
  	}
***************
*** 1231,1236 ****
--- 1238,1252 ----
      int imagic1;   /* like magic[1], but can represent EOF */
      ulg stamp;     /* time stamp */
  
+     if (noheader) {		/* DAC 2000/12/17: inflate/deflate only - don't write/check for gzip header */
+ 	method = DEFLATED;
+ 	work=unzip;
+ 	flags=0;
+ 	inptr = 0;
+ 	last_member = 1;
+ 	return method;
+     }
+ 
      /* If --force and --stdout, zcat == cat, so do not complain about
       * premature end of file: use try_byte instead of get_byte.
       */
diff -rc gzip-1.3.12/gzip.h gzip-1.3.12-dac/gzip.h
*** gzip-1.3.12/gzip.h	2007-03-20 01:09:51.000000000 -0400
--- gzip-1.3.12-dac/gzip.h	2008-04-07 17:43:16.000000000 -0400
***************
*** 283,300 ****
  		   if (exit_code == OK) exit_code = WARNING;}
  
  	/* in zip.c: */
! extern int zip        OF((int in, int out));
  extern int file_read  OF((char *buf,  unsigned size));
  
  	/* in unzip.c */
! extern int unzip      OF((int in, int out));
  extern int check_zipfile OF((int in));
  
  	/* in unpack.c */
! extern int unpack     OF((int in, int out));
  
  	/* in unlzh.c */
! extern int unlzh      OF((int in, int out));
  
  	/* in gzip.c */
  void abort_gzip OF((void)) ATTRIBUTE_NORETURN;
--- 283,300 ----
  		   if (exit_code == OK) exit_code = WARNING;}
  
  	/* in zip.c: */
! extern int zip        OF((int in, int out, int noheader));
  extern int file_read  OF((char *buf,  unsigned size));
  
  	/* in unzip.c */
! extern int unzip      OF((int in, int out, int noheader));
  extern int check_zipfile OF((int in));
  
  	/* in unpack.c */
! extern int unpack     OF((int in, int out, int noheader));
  
  	/* in unlzh.c */
! extern int unlzh      OF((int in, int out, int noheader));
  
  	/* in gzip.c */
  void abort_gzip OF((void)) ATTRIBUTE_NORETURN;
***************
*** 317,323 ****
  extern   int (*read_buf) OF((char *buf, unsigned size));
  
  	/* in util.c: */
! extern int copy           OF((int in, int out));
  extern ulg  updcrc        OF((uch *s, unsigned n));
  extern void clear_bufs    OF((void));
  extern int  fill_inbuf    OF((int eof_ok));
--- 317,323 ----
  extern   int (*read_buf) OF((char *buf, unsigned size));
  
  	/* in util.c: */
! extern int copy           OF((int in, int out, int noheader));
  extern ulg  updcrc        OF((uch *s, unsigned n));
  extern void clear_bufs    OF((void));
  extern int  fill_inbuf    OF((int eof_ok));
Only in gzip-1.3.12-dac/lib: .deps
Only in gzip-1.3.12-dac/lib: Makefile
Only in gzip-1.3.12-dac/lib: config.h
Only in gzip-1.3.12-dac/lib: stamp-h1
diff -rc gzip-1.3.12/lzw.c gzip-1.3.12-dac/lzw.c
*** gzip-1.3.12/lzw.c	1999-10-06 01:01:31.000000000 -0400
--- gzip-1.3.12-dac/lzw.c	2008-04-07 17:43:16.000000000 -0400
***************
*** 14,21 ****
  static int msg_done = 0;
  
  /* Compress in to out with lzw method. */
! int lzw(in, out)
      int in, out;
  {
      if (msg_done) return ERROR;
      msg_done = 1;
--- 14,22 ----
  static int msg_done = 0;
  
  /* Compress in to out with lzw method. */
! int lzw(in, out, noheader)
      int in, out;
+     int noheader;	    /* DAC 2000/12/17: inflate/deflate only - don't write/check for gzip header */
  {
      if (msg_done) return ERROR;
      msg_done = 1;
diff -rc gzip-1.3.12/lzw.h gzip-1.3.12-dac/lzw.h
*** gzip-1.3.12/lzw.h	2006-11-20 03:40:33.000000000 -0500
--- gzip-1.3.12-dac/lzw.h	2008-04-07 17:43:16.000000000 -0400
***************
*** 50,54 ****
  extern int maxbits;      /* max bits per code for LZW */
  extern int block_mode;   /* block compress mode -C compatible with 2.0 */
  
! extern int lzw    OF((int in, int out));
! extern int unlzw  OF((int in, int out));
--- 50,54 ----
  extern int maxbits;      /* max bits per code for LZW */
  extern int block_mode;   /* block compress mode -C compatible with 2.0 */
  
! extern int lzw    OF((int in, int out, int noheader));
! extern int unlzw  OF((int in, int out, int noheader));
diff -rc gzip-1.3.12/unlzh.c gzip-1.3.12-dac/unlzh.c
*** gzip-1.3.12/unlzh.c	2006-11-20 03:40:34.000000000 -0500
--- gzip-1.3.12-dac/unlzh.c	2008-04-07 17:43:16.000000000 -0400
***************
*** 383,391 ****
  /* ===========================================================================
   * Unlzh in to out. Return OK or ERROR.
   */
! int unlzh(in, out)
      int in;
      int out;
  {
      unsigned n;
      ifd = in;
--- 383,392 ----
  /* ===========================================================================
   * Unlzh in to out. Return OK or ERROR.
   */
! int unlzh(in, out, noheader)
      int in;
      int out;
+     int noheader;	    /* DAC 2000/12/17: inflate/deflate only - don't write/check for gzip header */
  {
      unsigned n;
      ifd = in;
diff -rc gzip-1.3.12/unlzw.c gzip-1.3.12-dac/unlzw.c
*** gzip-1.3.12/unlzw.c	2006-12-11 13:54:39.000000000 -0500
--- gzip-1.3.12-dac/unlzw.c	2008-04-07 20:24:18.000000000 -0400
***************
*** 188,195 ****
   *   The magic header has already been checked and skipped.
   *   bytes_in and bytes_out have been initialized.
   */
! int unlzw(in, out)
      int in, out;    /* input and output file descriptors */
  {
      REG2   char_type  *stackp;
      REG3   code_int   code;
--- 188,196 ----
   *   The magic header has already been checked and skipped.
   *   bytes_in and bytes_out have been initialized.
   */
! int unlzw(in, out, noheader)
      int in, out;    /* input and output file descriptors */
+ 	int noheader;	/* DAC 2008/04/07: inflate/deflate only - don't write/check for gzip header */
  {
      REG2   char_type  *stackp;
      REG3   code_int   code;
diff -rc gzip-1.3.12/unpack.c gzip-1.3.12-dac/unpack.c
*** gzip-1.3.12/unpack.c	2006-11-20 03:40:34.000000000 -0500
--- gzip-1.3.12-dac/unpack.c	2008-04-07 17:43:16.000000000 -0400
***************
*** 200,207 ****
   *   the compressed data, from offsets inptr to insize-1 included.
   *   The magic header has already been checked. The output buffer is cleared.
   */
! int unpack(in, out)
      int in, out;            /* input and output file descriptors */
  {
      int len;                /* Bit length of current code */
      unsigned eob;           /* End Of Block code */
--- 200,208 ----
   *   the compressed data, from offsets inptr to insize-1 included.
   *   The magic header has already been checked. The output buffer is cleared.
   */
! int unpack(in, out, noheader)
      int in, out;            /* input and output file descriptors */
+     int noheader;	    /* DAC 2000/12/17: inflate/deflate only - don't write/check for gzip header */
  {
      int len;                /* Bit length of current code */
      unsigned eob;           /* End Of Block code */
diff -rc gzip-1.3.12/unzip.c gzip-1.3.12-dac/unzip.c
*** gzip-1.3.12/unzip.c	2006-11-20 03:40:34.000000000 -0500
--- gzip-1.3.12-dac/unzip.c	2008-04-07 20:44:55.000000000 -0400
***************
*** 113,120 ****
   *   the compressed data, from offsets inptr to insize-1 included.
   *   The magic header has already been checked. The output buffer is cleared.
   */
! int unzip(in, out)
      int in, out;   /* input and output file descriptors */
  {
      ulg orig_crc = 0;       /* original crc */
      ulg orig_len = 0;       /* original uncompressed length */
--- 113,121 ----
   *   the compressed data, from offsets inptr to insize-1 included.
   *   The magic header has already been checked. The output buffer is cleared.
   */
! int unzip(in, out, noheader)
      int in, out;   /* input and output file descriptors */
+     int noheader;	    /* DAC 2000/12/17: inflate/deflate only - don't write/check for gzip header */
  {
      ulg orig_crc = 0;       /* original crc */
      ulg orig_len = 0;       /* original uncompressed length */
***************
*** 127,133 ****
  
      updcrc(NULL, 0);           /* initialize crc */
  
!     if (pkzip && !ext_header) {  /* crc and length at the end otherwise */
  	orig_crc = LG(inbuf + LOCCRC);
  	orig_len = LG(inbuf + LOCLEN);
      }
--- 128,134 ----
  
      updcrc(NULL, 0);           /* initialize crc */
  
!     if (!noheader && pkzip && !ext_header) {  /* crc and length at the end otherwise */ /* DAC 2000/12/23 add noheader */
  	orig_crc = LG(inbuf + LOCCRC);
  	orig_len = LG(inbuf + LOCLEN);
      }
***************
*** 161,167 ****
  	gzip_error ("internal error, invalid method");
      }
  
!     /* Get the crc and original length */
      if (!pkzip) {
          /* crc32  (see algorithm.doc)
  	 * uncompressed input size modulo 2^32
--- 162,169 ----
  	gzip_error ("internal error, invalid method");
      }
  
!     if (!noheader) {							/* DAC 2008/04/07 */
! 	/* Get the crc and original length */
      if (!pkzip) {
          /* crc32  (see algorithm.doc)
  	 * uncompressed input size modulo 2^32
***************
*** 184,190 ****
  	orig_crc = LG(buf+4);
  	orig_len = LG(buf+12);
      }
! 
      /* Validate decompression */
      if (orig_crc != updcrc(outbuf, 0)) {
  	fprintf(stderr, "\n%s: %s: invalid compressed data--crc error\n",
--- 186,192 ----
  	orig_crc = LG(buf+4);
  	orig_len = LG(buf+12);
      }
! 	
      /* Validate decompression */
      if (orig_crc != updcrc(outbuf, 0)) {
  	fprintf(stderr, "\n%s: %s: invalid compressed data--crc error\n",
***************
*** 196,204 ****
  		program_name, ifname);
  	err = ERROR;
      }
  
      /* Check if there are more entries in a pkzip file */
!     if (pkzip && inptr + 4 < insize && LG(inbuf+inptr) == LOCSIG) {
  	if (to_stdout) {
  	    WARN((stderr,
  		  "%s: %s has more than one entry--rest ignored\n",
--- 198,207 ----
  		program_name, ifname);
  	err = ERROR;
      }
+ 	}
  
      /* Check if there are more entries in a pkzip file */
!     if (!noheader && pkzip && inptr + 4 < insize && LG(inbuf+inptr) == LOCSIG) {
  	if (to_stdout) {
  	    WARN((stderr,
  		  "%s: %s has more than one entry--rest ignored\n",
diff -rc gzip-1.3.12/util.c gzip-1.3.12-dac/util.c
*** gzip-1.3.12/util.c	2006-12-11 13:54:39.000000000 -0500
--- gzip-1.3.12-dac/util.c	2008-04-07 17:43:16.000000000 -0400
***************
*** 60,67 ****
   * Copy input to output unchanged: zcat == cat with --force.
   * IN assertion: insize bytes have already been read in inbuf.
   */
! int copy(in, out)
      int in, out;   /* input and output file descriptors */
  {
      errno = 0;
      while (insize != 0 && (int)insize != -1) {
--- 60,68 ----
   * Copy input to output unchanged: zcat == cat with --force.
   * IN assertion: insize bytes have already been read in inbuf.
   */
! int copy(in, out, noheader)
      int in, out;   /* input and output file descriptors */
+     int noheader;	    /* DAC 2000/12/17: inflate/deflate only - don't write/check for gzip header */
  {
      errno = 0;
      while (insize != 0 && (int)insize != -1) {
diff -rc gzip-1.3.12/zip.c gzip-1.3.12-dac/zip.c
*** gzip-1.3.12/zip.c	2007-03-20 01:09:51.000000000 -0400
--- gzip-1.3.12-dac/zip.c	2008-04-07 20:22:45.000000000 -0400
***************
*** 43,50 ****
   * IN assertions: the input and output buffers are cleared.
   *   The variables time_stamp and save_orig_name are initialized.
   */
! int zip(in, out)
      int in, out;            /* input and output file descriptors */
  {
      uch  flags = 0;         /* general purpose bit flags */
      ush  attr = 0;          /* ascii/binary flag */
--- 43,51 ----
   * IN assertions: the input and output buffers are cleared.
   *   The variables time_stamp and save_orig_name are initialized.
   */
! int zip(in, out, noheader)
      int in, out;            /* input and output file descriptors */
+     int noheader;	    /* DAC 2000/12/17: inflate/deflate only - don't write/check for gzip header */
  {
      uch  flags = 0;         /* general purpose bit flags */
      ush  attr = 0;          /* ascii/binary flag */
***************
*** 57,63 ****
  
      /* Write the header to the gzip file. See algorithm.doc for the format */
  
!     method = DEFLATED;
      put_byte(GZIP_MAGIC[0]); /* magic header */
      put_byte(GZIP_MAGIC[1]);
      put_byte(DEFLATED);      /* compression method */
--- 58,65 ----
  
      /* Write the header to the gzip file. See algorithm.doc for the format */
  
!     if (!noheader) {		/* DAC 2008/04/07: inflate/deflate only - don't write/check for gzip header */
! 	method = DEFLATED;
      put_byte(GZIP_MAGIC[0]); /* magic header */
      put_byte(GZIP_MAGIC[1]);
      put_byte(DEFLATED);      /* compression method */
***************
*** 73,83 ****
  
      /* Write deflated file to zip file */
      crc = updcrc(0, 0);
! 
      bi_init(out);
      ct_init(&attr, &method);
      lm_init(level, &deflate_flags);
  
      put_byte((uch)deflate_flags); /* extra flags */
      put_byte(OS_CODE);            /* OS identifier */
  
--- 75,87 ----
  
      /* Write deflated file to zip file */
      crc = updcrc(0, 0);
! 	}
! 	
      bi_init(out);
      ct_init(&attr, &method);
      lm_init(level, &deflate_flags);
  
+ 	if (!noheader) {		/* DAC 2008/04/07: inflate/deflate only - don't write/check for gzip header */
      put_byte((uch)deflate_flags); /* extra flags */
      put_byte(OS_CODE);            /* OS identifier */
  
***************
*** 88,94 ****
  	} while (*p++);
      }
      header_bytes = (off_t)outcnt;
! 
      (void)deflate();
  
  #if !defined(NO_SIZE_CHECK) && !defined(RECORD_IO)
--- 92,99 ----
  	} while (*p++);
      }
      header_bytes = (off_t)outcnt;
! 	}
! 	
      (void)deflate();
  
  #if !defined(NO_SIZE_CHECK) && !defined(RECORD_IO)
***************
*** 101,111 ****
      }
  #endif
  
!     /* Write the crc and uncompressed size */
      put_long(crc);
      put_long((ulg)bytes_in);
      header_bytes += 2*sizeof(long);
! 
      flush_outbuf();
      return OK;
  }
--- 106,118 ----
      }
  #endif
  
!     if (!noheader) {	/* DAC 2008/04/07: inflate/deflate only - don't write/check for gzip header */
! 	/* Write the crc and uncompressed size */
      put_long(crc);
      put_long((ulg)bytes_in);
      header_bytes += 2*sizeof(long);
! 	}
! 	
      flush_outbuf();
      return OK;
  }
